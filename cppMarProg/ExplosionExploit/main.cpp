#include <iostream>
#include <unordered_map>
#include <algorithm>
#include <string>
#include <vector>

using namespace std;
int n,m,d;
vector<int> es(10,0);
unordered_map<string,double> dp;


string encodeState(vector<int> s){
    string coding="";
    for(int i=0;i<5;i++){
        coding=coding+to_string(s[i]);
    }
    coding=coding+",";
    for(int i=5;i<10;i++){
        coding=coding+to_string(s[i]);
    }
    return coding;
}
double allPossible(int index,int damage,vector<int> s){
    if(index!=-1)s[index]--;
    sort(s.begin(),s.begin()+5);
    sort(s.begin()+5,s.begin()+10);
    string state=encodeState(s);

    int decide=1;
    for(int i=5;i<10;i++){
        if(s[i]!=0){
            decide=0;
            break;
        }
    }
    if(decide)return 1;


    if(damage==0)return 0;

    if(dp.find(state)!=dp.end())return dp[state];

    double countNum=0;
    for(int i=0;i<10;i++){
        if(s[i]!=0){
            countNum++;
        }
    }

    double val=0;
    for(int i=0;i<10;i++){
        if(s[i]!=0){
            val+=((1/countNum)*allPossible(i,damage-1,s));
        }
    }

    dp[state]=val;

    return val;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m >> d;
    for(int i=0;i<n;i++){
        cin >> es[i];
    }
    for(int i=5;i<m+5;i++){
        cin >> es[i];
    }
    cout << allPossible(-1,d,es)<<"\n";
    return 0;
}
