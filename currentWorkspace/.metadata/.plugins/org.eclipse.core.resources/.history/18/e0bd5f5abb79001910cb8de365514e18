import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;

class Hexagon{
	int i,j;
	Hexagon[] neighbors;
	char symbol;
	boolean visited;
	public Hexagon(char s,int is, int js) {
		neighbors=new Hexagon[6];
		symbol=s;
		visited=false;
		i=is;
		j=js;
	}
}
class bee {

	public static void main(String[] args) throws IOException {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
		String[] A=br.readLine().split("\\s+");
		int h=Integer.parseInt(A[0]);
		int n=Integer.parseInt(A[1]);
		int m=Integer.parseInt(A[2]);
		Hexagon[][] hive=new Hexagon[n][m*2];
		for (int i = 0; i < n; i++) {
			char[] line=br.readLine().toCharArray();
			for (int j = 0; j < line.length; j++) {
				if(line[j]!=' ' && line[j]!='#')hive[i][j]=new Hexagon(line[j],i,j);
			}
		}
		for (int i = 0; i < hive.length; i++) {
			for (int j = 0; j < hive[0].length; j++) {
				if(hive[i][j]!=null) {
					setUpNeighbors(i,j,hive);
				}
			}
		}
		ArrayList<Integer> components=new ArrayList<Integer>();
		for (int i = 0; i < hive.length; i++) {
			for (int j = 0; j < hive[0].length; j++) {
				if(hive[i][j]!=null && !hive[i][j].visited) {
					int number=recorrido(hive[i][j]);
					components.add(number);
				}
			}
		}
		Collections.sort(components);
		int counter=0;
		int sum=0;
		for (int i = components.size()-1; i >=0; i--) {
			//System.out.println(components.get(i));
			sum+=components.get(i);
			counter++;
			if(sum>=h)break;
		}
		System.out.println(counter);
	}

	private static Integer recorrido(Hexagon h) {
		System.out.println(h.i+" "+h.j);
		h.visited=true;
		int sum=0;
		for (int i = 0; i < h.neighbors.length; i++) {
			if(h.neighbors[i]!=null&&!h.neighbors[i].visited) {
				sum+=recorrido(h.neighbors[i]);
			}
		}
		return sum+1;
	}

	private static void setUpNeighbors(int i, int j, Hexagon[][] hive) {
		if(valid(i,j+2,hive)) {
			hive[i][j].neighbors[0]=hive[i][j+2];
		}
		if(valid(i+1,j+1,hive)) {
			hive[i][j].neighbors[1]=hive[i+1][j+1];
		}
		if(valid(i+1,j-1,hive)) {
			hive[i][j].neighbors[2]=hive[i+1][j-1];
		}
		if(valid(i,j-2,hive)) {
			hive[i][j].neighbors[3]=hive[i][j-2];
		}
		if(valid(i-1,j-1,hive)) {
			hive[i][j].neighbors[4]=hive[i-1][j-1];
		}
		if(valid(i-1,j+1,hive)) {
			hive[i][j].neighbors[5]=hive[i-1][j+1];
		}
	}

	private static boolean valid(int i, int j, Hexagon[][] hive) {
		return i<hive.length && i>=0 && j<hive[0].length && j>=0 && hive[i][j]!=null;
	}

}
